
/**
 * Tests the correctness of SudokuSolver and SudokuImage
 * 
 * @author Patrick McCarty
 *
 */
public class SudokuTester {
  
  /**
   * Main method
   * 
   * @param args array of arguments if any exist
   */
  public static void main(String[] args) {
    int[] testBoard = {5, 3, 0, 0, 7, 0, 0, 0, 0,
                       6, 0, 0, 1, 9, 5, 0, 0, 0,
                       0, 9, 8, 0, 0, 0, 0, 6, 0,
                       8, 0, 0, 0, 6, 0, 0, 0, 3,
                       4, 0, 0, 8, 0, 3, 0, 0, 1,
                       7, 0, 0, 0, 2, 0, 0, 0, 6,
                       0, 6, 0, 0, 0, 0, 2, 8, 0,
                       0, 0, 0, 4, 1, 9, 0, 0, 5,
                       0, 0, 0, 0, 8, 0, 0, 7, 9}; /* Represents a Sudoku puzzle board with missing
                       with missing values represented as 0's */
    
//    int[] correctTestBoard = {5, 3, 4, 6, 7, 8, 9, 1, 2,
//                              6, 7, 2, 1, 9, 5, 3, 4, 8,
//                              1, 9, 8, 3, 4, 2, 5, 6, 7,
//                              8, 5, 9, 7, 6, 1, 4, 2, 3,
//                              4, 2, 6, 8, 5, 3, 7, 9, 1,
//                              7, 1, 3, 9, 2, 4, 8, 5, 6,
//                              9, 6, 1, 5, 3, 7, 2, 8, 4,
//                              2, 8, 7, 4, 1, 9, 6, 3, 5,
//                              3, 4, 5, 2, 8, 6, 1, 7, 9};
//
//    int[] hardBoard = {0, 0, 0, 0, 0, 0, 0, 0, 0,
//                       0, 0, 0, 0, 0, 3, 0, 8, 5,
//                       0, 0, 1, 0, 2, 0, 0, 0, 0,
//                       0, 0, 0, 5, 0, 7, 0, 0, 0,
//                       0, 0, 4, 0, 0, 0, 1, 0, 0,
//                       0, 9, 0, 0, 0, 0, 0, 0, 0,
//                       5, 0, 0, 0, 0, 0, 0, 7, 3,
//                       0, 0, 2, 0, 1, 0, 0, 0, 0,
//                       0, 0, 0, 0, 4, 0, 0, 0, 9};
//    
//    int[] thirdBoard = {0, 0, 0, 0, 0, 1, 0, 8, 2,
//                        0, 8, 9, 0, 0, 0, 0, 0, 4,
//                        0, 4, 0, 8, 0, 9, 6, 0, 0,
//                        0, 0, 7, 0, 8, 0, 1, 4, 0,
//                        0, 0, 0, 1, 0, 2, 0, 0, 0,
//                        0, 5, 1, 0, 6, 0, 3, 0, 0,
//                        0, 0, 4, 5, 0, 7, 0, 3, 0,
//                        5, 0, 0, 0, 0, 0, 4, 7, 0,
//                        3, 7, 0, 4, 0, 0, 0, 0, 0};
//    
//    int[] startWithOne = {0, 0, 0, 8, 0, 0, 0, 0, 0,
//                          7, 8, 9, 0, 1, 0, 0, 0, 6,
//                          0, 0, 0, 0, 0, 6, 1, 0, 0,
//                          0, 0, 7, 0, 0, 0, 0, 5, 0,
//                          5, 0, 8, 7, 0, 9, 3, 0, 4,
//                          0, 4, 0, 0, 0, 0, 2, 0, 0,
//                          0, 0, 3, 2, 0, 0, 0, 0, 0,
//                          8, 0, 0, 0, 7, 0, 4, 3, 9,
//                          0, 0, 0, 0, 0, 1, 0, 0, 0};

    SudokuSolver.solve(testBoard, true);
  }
}
